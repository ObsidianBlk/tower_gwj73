extends FSMState

# ------------------------------------------------------------------------------
# Signals
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Constants and ENUMs
# ------------------------------------------------------------------------------
const ANIM_IDLE : StringName = &"idle"

const CHASE_ANGLE : float = deg_to_rad(10.0)

# ------------------------------------------------------------------------------
# Export Variables
# ------------------------------------------------------------------------------
@export var unified_player : ASpriteUnifiedPlayer3D = null

# ------------------------------------------------------------------------------
# Variables
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Onready Variables
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Setters / Getters
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Override Methods
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Private Methods
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# "Virtual" Public Methods
# ------------------------------------------------------------------------------
func enter(_data : Dictionary = {}) -> void:
	print("Idle")
	if unified_player != null:
		unified_player.play(ANIM_IDLE)


func update(delta : float) -> void:
	if host == null: return
	if host.has_visible_node():
		host.face_visible_target()
		host.turn_rate = min(1.0, host.turn_rate + delta)
		host.update_facing(delta)
		var angle : float = host.get_angle_to_visible()
		if angle >= -CHASE_ANGLE and angle <= CHASE_ANGLE:
			request_state_change(&"Chase")
	else:
		host.turn_rate = 0.0

# ------------------------------------------------------------------------------
# Handler Methods
# ------------------------------------------------------------------------------
